<project name="copysnippets" basedir="." default="hereToLocalSnippets">

	<!--
	INSTRUCTIONS: 
	
	This ant file is designed to help you easily copy the mxunit cfeclipse snippets
	from this distribution into your own snippets directory. In addition, it will
	also copy the keyboard shortcuts into your own shortcuts file... it will NOT
	overwrite your other non-mxunit shortcuts! (plus... it makes a backup of your existing
	shortcuts file, too).
	
	1) Create a file named copysnippets.properties in this directory
	2) populate it like so: snipdir.options=c:/my/path/to/cf/snippets
	   
	   The paths must be forward slashes!
	   
	   On my computer, the path is:
	   snipdir.options=C:/Users/Marc/Documents/My Dropbox/CFEclipseSnippets
	      
	   
	   note: this can be a comma-separated list, too, just in case you have multiple snippets locations 
	   (for different eclipse installs, for example)
	   
	3) Right click on this copy.xml file and select "Run as Ant Build".
	      
	-->

	<available file="copysnippets.properties" property="propsavailable" />


	<target name="init" depends="createDefaultPropertiesFile">
		<path id="cp">
			<fileset dir="../lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
		<property file="copysnippets.properties" />

		<property name="snipdirname" value="mxunit" />
	</target>


	<target name="initSnipCopy" depends="init">

		<input addproperty="local.snipdir" validargs="${snipdir.options}" message="Where are your local snippets?" />
		<input addproperty="overwrite" validargs="true,false" message="overwrite existing snippets if they exist?" />


		<property name="snip.location" location="snippets" />

		<fail message="snippet directory ${local.snipdir} does not exist">
			<condition>
				<not>
					<available file="${local.snipdir}" />
				</not>
			</condition>
		</fail>

		<echoproperties regex="local|snip" />

	</target>

	<target name="localSnippetsToHere" depends="initSnipCopy">

		<copy todir="${snip.location}" overwrite="${overwrite}" verbose="true">
			<fileset dir="${local.snipdir}" includes="${snipdirname}/" />
		</copy>

		<copyKeyCombos from="${local.snipdir}/keyCombos.properties" to="${snip.location}/keyCombos.properties" propValuePattern="/${snipdirname}/" />
	</target>

	<target name="hereToLocalSnippets" depends="initSnipCopy">
		<echoproperties regex="local|snip" />
		<copy todir="${local.snipdir}" overwrite="${overwrite}" verbose="true">
			<fileset dir="${snip.location}" includes="${snipdirname}/" />
		</copy>

		<copyKeyCombos from="${snip.location}/keyCombos.properties" to="${local.snipdir}/keyCombos.properties" propValuePattern="/${snipdirname}/" />

	</target>

	<target name="createDefaultPropertiesFile" unless="propsavailable">
		<propertyfile file="copysnippets.properties" comment="This can be a comma-separated list of valid paths to snippet directories">
			<entry key="snipdir.options" value="C:/add/your/snippet/path/here" />
		</propertyfile>
	</target>

	<macrodef name="copyKeyCombos">
		<attribute name="from" />
		<attribute name="to" />
		<attribute name="propValuePattern" default="/${snipdirname}/" />
		<sequential>
			<loadfile srcfile="@{from}" property="keycombos" />
			<!-- to be safe, back it up first -->
			<echo message="Backing up keycombos [@{to}] to @{to}.bak"/>
			<copy file="@{to}" tofile="@{to}.bak" overwrite="true" />

			<for list="${keycombos}" param="thisprop" delimiter="${line.separator}">
				<sequential>
					<echo message="looking at keycombo @{thisprop}" />
					<if>
						<contains string="@{thisprop}" substring="@{propValuePattern}" casesensitive="false" />
						<then>
							<listGetAt list="@{thisprop}" pos="1" delim="=" prop="k" />
							<listGetAt list="@{thisprop}" pos="2" delim="=" prop="v" />
							<echo message="matches.... copying" />
							<propertyfile file="@{to}">
								<!-- if an entry already exists, it will not overwrite it! -->
								<entry key="${k}" default="${v}" />
							</propertyfile>
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<scriptdef name="listGetAt" language="javascript">
		<attribute name="list" />
		<attribute name="pos" />
		<attribute name="delim" />
		<attribute name="prop" />		
			values = attributes.get("list").split(attributes.get("delim"));
			myint = parseInt(attributes.get("pos"));
			oneBasedIndex = myint-1; /* so if they pass position "1", we turn that into "0" since javascript is 0-based but we want to work in a 1-based fashion  */
			project.setProperty(attributes.get("prop"),values[oneBasedIndex]);	         
	</scriptdef>


</project>