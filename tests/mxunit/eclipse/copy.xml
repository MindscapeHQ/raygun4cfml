<project name="copysnippets" basedir="." default="hereToLocalSnippets">

	<available file="copy.properties" property="propsavailable" />


	<target name="init" depends="createDefaultPropertiesFile">
		<path id="cp">
			<fileset dir="../lib">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<taskdef resource="net/sf/antcontrib/antlib.xml" classpathref="cp" />
		<!-- populate it like so:
			snipdir.options=c:/my/path/to/cf/snippets
			
			note: this can be a comma-separated list, too
			 -->
		<property file="copy.properties" />



	</target>


	<target name="initSnipCopy" depends="init,createDefaultPropertiesFile">

		<input addproperty="local.snipdir" validargs="${snipdir.options}" message="Where are your local snippets?" />
		<input addproperty="overwrite" validargs="true,false" message="overwrite existing snippets if they exist?" />


		<property name="snip.location" location="snippets" />

		<fail message="snippet directory ${local.snipdir} does not exist">
			<condition>
				<not>
					<available file="${local.snipdir}" />
				</not>
			</condition>
		</fail>

		<echoproperties regex="local|snip" />

	</target>

	<target name="localSnippetsToHere" depends="initSnipCopy">

		<copy todir="${snip.location}" overwrite="${overwrite}" verbose="true">
			<fileset dir="${local.snipdir}" includes="mxunit/" />
		</copy>

		<copyKeyCombos from="${local.snipdir}\keyCombos.properties" to="${snip.location}\keyCombos.properties" propValuePattern="/mxunit/" />
	</target>

	<target name="hereToLocalSnippets" depends="initSnipCopy">
		<echoproperties regex="local|snip" />
		<copy todir="${local.snipdir}" overwrite="${overwrite}" verbose="true">
			<fileset dir="${snip.location}" includes="mxunit/" />
		</copy>
		
		<copyKeyCombos from="${snip.location}\keyCombos.properties" to="${local.snipdir}\keyCombos.properties" propValuePattern="/mxunit/" />
		
	</target>

	<target name="createDefaultPropertiesFile" unless="propsavailable">
		<propertyfile file="copy.properties" comment="This can be a comma-separated list of valid paths to snippet directories">
			<entry key="opts" value="C:/add/your/snippet/path/here" />
		</propertyfile>
	</target>

	<macrodef name="copyKeyCombos">
		<attribute name="from" />
		<attribute name="to" />
		<attribute name="propValuePattern" default="/mxunit/" />
		<sequential>
			<loadfile srcfile="@{from}" property="keycombos" />
			<copy file="@{to}" tofile="@{to}.bak"/>
			<for list="${keycombos}" param="thisprop" delimiter="${line.separator}">
				<sequential>
					<echo message="looking at keycombo @{thisprop}" />
					<if>
						<contains string="@{thisprop}" substring="@{propValuePattern}" casesensitive="false" />
						<then>
							<listGetAt list="@{thisprop}" pos="1" delim="=" prop="k" />
							<listGetAt list="@{thisprop}" pos="2" delim="=" prop="v" />
							<echo message="matches.... copying" />
							<propertyfile file="@{to}">
								<!-- if an entry already exists, it will not overwrite it! -->
								<entry key="${k}" default="${v}" />
							</propertyfile>
						</then>
					</if>
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<scriptdef name="listGetAt" language="javascript">
		<attribute name="list" />
		<attribute name="pos" />
		<attribute name="delim" />
		<attribute name="prop" />		
			values = attributes.get("list").split(attributes.get("delim"));
			myint = parseInt(attributes.get("pos"));
			oneBasedIndex = myint-1; /* so if they pass position "1", we turn that into "0" since javascript is 0-based but we want to work in a 1-based fashion  */
			project.setProperty(attributes.get("prop"),values[oneBasedIndex]);	         
	</scriptdef>


</project>